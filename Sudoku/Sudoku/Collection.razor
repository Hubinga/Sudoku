@page "/Collection"
@using Sudoku.Classes;
@using Sudoku.Models;
@inherits OwningComponentBase<DbService>
@using Microsoft.AspNetCore.Components.Forms

<h3>Collection</h3>
<div>
	<table class="table">	
		<thead>
			<tr>
				<th>OriginalBoard</th>
				<th>Difficulty</th>
				<th>Solved</th>
				<th>Time</th>
				<th></th>
			</tr>
		</thead>
		<tbody>
		@foreach (var item in sudokuModels)
		{
			<tr>
				<td>@item.OriginalBoard</td>
				<td>@item.Difficulty</td>
				<td>@item.Solved</td>
				<td>@item.Time</td>
				<td>
					<button class="btn btn-primary" @onclick="(() => EditSudoku(item))">Edit</button>
				</td>
				</tr>
		}
		</tbody>
	</table>
	<button class="btn btn-success" @onclick="AddNewSudoku">Add New Sudoku</button>
</div>

@if (ShowPopup)
{
	<div class="modal" tabindex="-1" style="display:block" role="dialog">
		<div class="modal-dialog">
			<div class="modal-content">
				<div class="modal-header">
					<h3 class="modal-title">Edit Sudoku</h3>
					<!-- Button to close the popup -->
					<button type="button" class="close"@onclick="ClosePopup">
						<span aria-hidden="true">X</span>
					</button>
				</div>
				<div class="modal-body">
					<div>
						<label>Upload a sudoku:
							<InputFile class="button-purple" OnChange="@OnInputFileChanged"/>
						</label>
					</div>
					<br/>

					<EditForm Model="@currentSudokuModel" OnValidSubmit="@SaveSudoku">
						<DataAnnotationsValidator />
						<ValidationSummary />
						<p>
							<label>
								Original Board:
								<InputText id="OriginalBoard" @bind-Value="currentSudokuModel.OriginalBoard"/>
							</label>
						</p>
						<p>
							<label>
								Solved (optional):
								<InputCheckbox id="Solved" @bind-Value="currentSudokuModel.Solved"/>
							</label>
						</p>
						<p>
							<label>
								Time in seconds (optional):
								<InputNumber id="Time" @bind-Value="currentSudokuModel.Time"/>
							</label>
						</p>
						<p>
							<label>
								Difficulty:
								<InputSelect Name="Difficulty" @bind-Value="currentSudokuModel.Difficulty">
									<option value="Easy">Easy</option>
									<option value="Medium">Medium</option>
									<option value="Hard">Hard</option>
								</InputSelect>
							</label>
						</p>
						<br/>
							<button type="submit">Save</button>&nbsp;
					</EditForm>
					@if (currentSudokuModel.Id > 0)
					{                                    
						<button class="btn btn-danger" @onclick="DeleteSudoku">Delete</button>
					}
				</div>
			</div>
		</div>
	</div>
}

@code {

	List<SudokuModel> sudokuModels = new List<SudokuModel>();

	protected override async Task OnInitializedAsync()
	{
		sudokuModels = await @Service.GetSudokuModelsAsync();
	}

	private async Task OnInputFileChanged(InputFileChangeEventArgs e)
	{
		//check for file type
		if (currentSudokuModel != null)
		{
			var file = e.File;
			long maxsize = 512000;

			var buffer = new byte[file.Size];
			await file.OpenReadStream(maxsize).ReadAsync(buffer);
			string fileContent = System.Text.Encoding.UTF8.GetString(buffer);

			currentSudokuModel.OriginalBoard = fileContent;
		}
	}

	SudokuModel currentSudokuModel = new SudokuModel();
	bool ShowPopup = false;

	void ClosePopup()
	{
		// Close the Popup
		ShowPopup = false;
	}
	void AddNewSudoku()
	{
		// Make new forecast
		currentSudokuModel = new SudokuModel();
		// Set Id to 0 so we know it is a new record
		currentSudokuModel.Id = 0;
		// Open the Popup
		ShowPopup = true;
	}

	void EditSudoku(SudokuModel sudokuModel)
	{
		// Set the selected forecast
		// as the current forecast
		currentSudokuModel = sudokuModel;
		// Open the Popup
		ShowPopup = true;
	}

	async Task DeleteSudoku()
	{
		// Close the Popup
		ShowPopup = false;
		// Delete the forecast
		var result = @Service.DeleteSudokuModelAsync(currentSudokuModel);
		// Get the forecasts for the current user
		sudokuModels = await @Service.GetSudokuModelsAsync();
	}

	async Task SaveSudoku()
	{
		// Close the Popup
		ShowPopup = false;
		// A new forecast will have the Id set to 0
		if (currentSudokuModel.Id == 0)
		{
			// Create new forecast
			SudokuModel newSudokuModel = new SudokuModel();
			newSudokuModel.OriginalBoard = currentSudokuModel.OriginalBoard;
			newSudokuModel.Difficulty = currentSudokuModel.Difficulty;
			newSudokuModel.Time = currentSudokuModel.Time;
			newSudokuModel.Solved = currentSudokuModel.Solved;
			// Save the result
			var result = @Service.AddSudokuModelAsync(newSudokuModel);
		}
		else
		{
			// This is an update
			var result = @Service.UpdateSudokuModelAsync(currentSudokuModel);
		}
		// Get the forecasts for the current user
		sudokuModels = await @Service.GetSudokuModelsAsync();
	}
}
