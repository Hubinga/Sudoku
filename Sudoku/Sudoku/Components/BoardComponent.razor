<section class="board">
	@{
		for (int i = 0; i < Board.GetLength(0); i++)
		{
			for (int j = 0; j < Board.GetLength(1); j++)
			{
				string cssClassTag = "tile";

				if (InitialFilledFields.Contains(Tuple.Create(i,j)))
				{
					cssClassTag += " fieldInitialFilled";
				}

				//bigger border for 3x3 block (border-bottom)
				if((i + 1) % 3 == 0)
				{
					cssClassTag += " tile-blockRow";
				}
				//bigger border for 3x3 block (border-right)
				if ((j + 1) % 3 == 0)
				{
					cssClassTag += " tile-blockCol";
				}
				//bigger border for first row (border-top)
				if (i == 0)
				{
					cssClassTag += " tile-firstRow";
				}
				//bigger border for first column (border-left)
				if (j == 0)
				{
					cssClassTag += " tile-firstCol";
				}

				string field = Board[i, j] == 0 ? " " : Board[i, j].ToString();

				if(!Edit){
					<div class=@cssClassTag>@field</div>
				}
				else
				{
					int currentRowIdx = i;
					int currentColIdx = j;
					<div tabindex="-1" class=@cssClassTag @onkeydown="KeyboardEventHandler" @onclick="() => FieldClicked(currentRowIdx, currentColIdx)">@field</div>
				}

			}
		}
	}
</section>
@code {
	private struct Field
	{
		public int RowIdx;
		public int ColIdx;

		public Field(int rowIdx, int colIdx)
		{
			RowIdx = rowIdx;
			ColIdx = colIdx;
		}

		public void ResetField(int rowIdx = -1, int colIdx = -1)
		{
			RowIdx = rowIdx;
			ColIdx = colIdx;
		}
	}

	[Parameter]
	public int[,] Board { get; set; } = new int[9, 9];
	[Parameter]
	public bool Edit { get; set; } = false;
	[Parameter]
	public List<Tuple<int, int>> InitialFilledFields { get; set; } = new List<Tuple<int, int>>();

	private Field activeField = new Field(-1, -1);

	//change number of selected field
	private void KeyboardEventHandler(KeyboardEventArgs args)
	{
		if (!Edit)
		{
			return;
		}

		if (activeField.RowIdx != -1 && activeField.ColIdx != -1)
		{
			string key = args.Key;

			//clear field
			if (key == "Backspace")
			{
				Board[activeField.RowIdx, activeField.ColIdx] = 0;
				return;
			}

			int inputNumber;
			if (int.TryParse(key, out inputNumber))
			{
				Board[activeField.RowIdx, activeField.ColIdx] = Convert.ToInt32(args.Key);
			}
		}
	}

	//set selected field
	private void FieldClicked(int rowIdx, int colIdx)
	{
		if(!Edit)
		{
			return;
		}

		//avoid changing field if its initially filled
		if (InitialFilledFields.Any(f => f.Item1 == rowIdx && f.Item2 == colIdx))
		{
			activeField.RowIdx = -1;
			activeField.ColIdx = -1;
		}
		else
		{
			activeField.RowIdx = rowIdx;
			activeField.ColIdx = colIdx;
		}
	}
}
