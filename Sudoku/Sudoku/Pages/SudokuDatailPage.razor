@page "/Collection/{Id:int}"
@inject NavigationManager NavigationManager
@using Sudoku.Classes;
@using Sudoku.Components
@using Sudoku.Models;
@inherits OwningComponentBase<DbService>
<PageTitle>Detail</PageTitle>

@{
	if(sudoku != null)
	{
		<div>
			<p>Difficulty: @currentSudokuModel.Difficulty</p
			<p>Help: @currentSudokuModel.Help</p
			<p>Time: @currentSudokuModel.Time</p	
		</div>

		<h3>Original Board</h3>
		<BoardComponent Board="@sudoku.OriginalBoard"></BoardComponent>
		if (sudoku.Solved)
		{
			<h3>Solved Board</h3>
			<BoardComponent Board="@sudoku.SolvedBoard"></BoardComponent>
		}
	}
}
<div>
  <NavLink href="SudokuCollection" class="back-link">Back</NavLink>
</div>

@code {
	private SudokuModel? currentSudokuModel = new SudokuModel();
	private Sudoku? sudoku = null;
	[Parameter]
	public int Id { get; set; }
	private SudokuCreator sudokuCreator = new SudokuCreator();

	protected override async Task OnInitializedAsync()
	{
		currentSudokuModel = await @Service.GetSudokuModelAsync(Id);

		if(currentSudokuModel != null)
		{
			int[,] originalBoard = sudokuCreator.ConvertBoardStringToIntArray(currentSudokuModel.OriginalBoard.Split(","));
			int[,] currentBoard = sudokuCreator.ConvertBoardStringToIntArray(currentSudokuModel.CurrentBoard.Split(","));

			//sudoku solved
			if(currentSudokuModel.SolvedBoard != null)
			{
				int[,] solvedBoard = sudokuCreator.ConvertBoardStringToIntArray(currentSudokuModel.SolvedBoard.Split(","));
				sudoku = new Sudoku(originalBoard, currentBoard, solvedBoard, currentSudokuModel.Solved);
			}
			else
			{
				//sudoku not yet solved
				sudoku = new Sudoku(originalBoard, currentBoard, originalBoard, currentSudokuModel.Solved);
			}
		}
	}
}
