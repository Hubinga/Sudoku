@page "/SolveSudoku/{Id:int}"
@using Sudoku.Classes;
@using Sudoku.Classes.Enums;
@using Sudoku.Models;
@inject NavigationManager NavigationManager
@inherits OwningComponentBase<DbService>
<PageTitle>Solve Sudoku</PageTitle>
<h3>Solve Sudoku</h3>
<PlaySudokuComponent HasUploadFileField="false" Sudoku="@sudoku" CurrentSudokuModelId="@Id" CurrentDifficulty="@currentDifficulty" CurrentHelp="@currentHelp" CurrentTime="@currentTime"></PlaySudokuComponent>
<div>
  <NavLink href="SudokuCollection" class="back-link">Back</NavLink>
</div>

@code {
	private SudokuModel? currentSudokuModel = new SudokuModel();
	private Sudoku? sudoku = null;
	[Parameter]
	public int Id { get; set; }
	private SudokuCreator sudokuCreator = new SudokuCreator();
	private int currentTime = 0;
	private Difficulty currentDifficulty = Difficulty.Medium;
	private HelpTypes currentHelp = HelpTypes.Nothing;

	protected override async Task OnInitializedAsync()
	{
		currentSudokuModel = await @Service.GetSudokuModelAsync(Id);

		if (currentSudokuModel != null)
		{
			int[,] originalBoard = sudokuCreator.ConvertBoardStringToIntArray(currentSudokuModel.OriginalBoard.Split(","));
			int[,] currentBoard;

			//sudoku solved
			if (currentSudokuModel.SolvedBoard != null)
			{
				int[,] solvedBoard = sudokuCreator.ConvertBoardStringToIntArray(currentSudokuModel.SolvedBoard.Split(","));

				currentBoard = new int[originalBoard.GetLength(0), originalBoard.GetLength(1)];
				Array.Copy(originalBoard, currentBoard, originalBoard.Length);

				sudoku = new Sudoku(originalBoard, currentBoard, solvedBoard, false);
			}
			else
			{
				currentBoard = sudokuCreator.ConvertBoardStringToIntArray(currentSudokuModel.CurrentBoard.Split(","));
				//sudoku not yet solved
				sudoku = new Sudoku(originalBoard, currentBoard, originalBoard, currentSudokuModel.Solved);
			}

			//if already solved timer should start at 0 (user wants to try again)
			currentTime = currentSudokuModel.Solved ? 0 : currentSudokuModel.Time;
			currentDifficulty = (Difficulty)Enum.Parse(typeof(Difficulty), currentSudokuModel.Difficulty);
			//if already solved reset Help to "No Help" (user wants to try again)
			currentHelp = currentSudokuModel.Solved ? HelpTypes.Nothing : (HelpTypes)Enum.Parse(typeof(HelpTypes), currentSudokuModel.Help);
		}
	}
}
